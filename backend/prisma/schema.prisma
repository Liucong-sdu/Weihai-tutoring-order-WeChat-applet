// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id        Int      @id @default(autoincrement())
  openid    String   @unique @db.VarChar(100)
  nickname  String?  @db.VarChar(50)
  avatarUrl String?  @map("avatar_url") @db.VarChar(500)
  phone     String?  @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  demands Demand[]

  @@map("users")
}

// 科目表
model Subject {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  isActive  Boolean  @default(true) @map("is_active")
  sortOrder Int      @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  priceSettings PriceSetting[]
  demands       Demand[]

  @@map("subjects")
}

// 年级表
model Grade {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(20)
  sortOrder Int      @default(0) @map("sort_order")

  priceSettings PriceSetting[]
  demands       Demand[]

  @@map("grades")
}

// 价格配置表
model PriceSetting {
  id         Int      @id @default(autoincrement())
  gradeId    Int      @map("grade_id")
  subjectId  Int      @map("subject_id")
  hourlyPrice Decimal  @map("hourly_price") @db.Decimal(10, 2)
  updatedBy  Int?     @map("updated_by")
  updatedAt  DateTime @updatedAt @map("updated_at")
  createdAt  DateTime @default(now()) @map("created_at")

  grade   Grade   @relation(fields: [gradeId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([gradeId, subjectId])
  @@map("price_settings")
}

// 需求表
model Demand {
  id             Int      @id @default(autoincrement())
  userId         Int      @map("user_id")
  gradeId        Int      @map("grade_id")
  subjectId      Int      @map("subject_id")
  locationAddress String  @map("location_address") @db.VarChar(200)
  hourlyPrice    Decimal  @map("hourly_price") @db.Decimal(10, 2)
  status         DemandStatus @default(PENDING)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user       User    @relation(fields: [userId], references: [id])
  grade      Grade   @relation(fields: [gradeId], references: [id])
  subject    Subject @relation(fields: [subjectId], references: [id])
  statusLogs DemandStatusLog[]

  @@map("demands")
}

// 状态变更日志表
model DemandStatusLog {
  id        Int           @id @default(autoincrement())
  demandId  Int           @map("demand_id")
  oldStatus DemandStatus? @map("old_status")
  newStatus DemandStatus  @map("new_status")
  changedAt DateTime      @default(now()) @map("changed_at")
  operatorId Int?    @map("operator_id")
  remark    String?  @db.VarChar(200)
  createdAt DateTime @default(now()) @map("created_at")

  demand Demand @relation(fields: [demandId], references: [id])

  @@map("demand_status_logs")
}

// 管理员表
model Admin {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  name         String?  @db.VarChar(50)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

// 系统配置表
model SystemConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique @db.VarChar(50)
  value     String   @db.Text
  description String? @db.VarChar(200)
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("system_configs")
}

enum DemandStatus {
  PENDING      @map("待处理")
  FOLLOWING_UP @map("跟进中")
  MATCHED      @map("已匹配")
  CLOSED       @map("已关闭")
}